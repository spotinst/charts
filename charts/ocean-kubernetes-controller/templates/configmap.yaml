{{- if .Values.configMap.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ocean-kubernetes-controller.configMapName" . }}
  labels:
  {{- include "ocean-kubernetes-controller.labels" . | nindent 4 }}
data:
  spotinst.cluster-identifier: {{ required "`spotinst.clusterIdentifier` must be specified" .Values.spotinst.clusterIdentifier }}
  base-url: {{ default "" .Values.spotinst.baseUrl | quote }}
  proxy-url: {{ default "" .Values.spotinst.proxyUrl | quote }}
  leader-election: {{ gt (int .Values.replicas) 1 | quote }}
  disable-auto-update: {{ default "false" .Values.spotinst.disableAutoUpdate | quote }}
  enable-csr-approval: {{ default "false" .Values.spotinst.enableCsrApproval | quote }}
  {{- if not .Values.spotinst.disableAutoUpdate }}
  auto-update.job: |
    {{- include "auto-updater.job" . | nindent 4 }}
  {{- end }}
  {{- if eq (include "ocean-kubernetes-controller.logShipping.enabled" .) "true" }}
  fluent-bit.conf: |
    [SERVICE]
        Parsers_File parsers.conf
        Flush        60
        Daemon       Off

    [INPUT]
        Name            tail
        Path            /var/log/controller.logs
        Parser          json
        Buffer_Max_Size 2MB
        Skip_Long_Lines On
        Skip_Empty_Lines On
        Refresh_Interval 10

    # rename msg -> message , level -> l
    [FILTER]
        Name       modify
        Match      *
        Rename     msg message
        Rename     level l

    # info -> INFO
    [FILTER]
        Name       modify
        Match      *

        Condition Key_Value_Equals l info
        SET l INFO

    # debug -> DEBUG
    [FILTER]
        Name       modify
        Match      *

        Condition Key_Value_Equals l debug
        SET l DEBUG

    # trace -> TRACE
    [FILTER]
        Name       modify
        Match      *

        Condition Key_Value_Equals l trace
        SET l TRACE

    # error -> ERROR
    [FILTER]
        Name       modify
        Match      *

        Condition Key_Value_Equals l error
        SET l ERROR

    # nest all fields under log key
    [FILTER]
        Name       nest
        Match      *
        Operation  nest
        Wildcard   *
        Nest_Under log

    # stringify log field
    [FILTER]
        Name Lua
        Match *
        call parse
        code function stringify(obj) result = {} for key, value in pairs(obj) do table.insert(result, string.format("\"%s\":%q", key, value)) end result = "{" .. table.concat(result, ",") .. "}" return result end function parse(tag, timestamp, record) new_record = record new_record["log"] = stringify(record["log"]) return 1, timestamp, new_record end

    [OUTPUT]
        Name        http
        Match       *
        Format      json
        Host        {{ .Values.logShipping.destination.host }}
        Port        {{ .Values.logShipping.destination.port }}
        TLS         {{ .Values.logShipping.destination.tls }}
        URI         /logs/${CLUSTER_IDENTIFIER}?accountId=${SPOTINST_ACCOUNT}
        Header      Authorization Bearer ${SPOTINST_TOKEN}
        Retry_Limit no_retries
  parsers.conf: |
    [PARSER]
        Name        json
        Format      json
  {{- end }}
{{- end }}
